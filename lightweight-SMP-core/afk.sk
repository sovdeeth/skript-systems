# Handles AFK marking and kicking
# Contains:
#   broadcastMarksAFK()
#   broadcastMarkedAFK()
#   broadcastUnmarksAFK()
#   /afk
#   updateLastAction()
#   /lastaction

# AFK Marking

options:
    cm: %{colour::main}%
    ca: %{colour::accent}%
    ci: %{colour::info}%
    cw: %{colour::warning}%
    ce: %{colour::error}%
    cs: %{colour::success}%

    warning-time: 15 minutes
    kick-time: 25 minutes


function broadcastMarksAFK(player: player):
    send sm("info","&o%{_player}% {@cm}&ohas marked themselves as AFK.") to all players 
function broadcastMarkedAFK(player: player):
    send sm("info","&o%{_player}% {@cm}&ohas been marked as AFK.") to all players
function broadcastUnmarksAFK(player: player):
    send sm("info","&o%{_player}% {@cm}&ois no longer marked as AFK.") to all players

function unafk(player: player):
    delete {core::afk::%{_player}%} #removes afk state
    broadcastUnmarksAFK({_player})
    remove blindness from {_player}
    play sound "block.note_block.bell" with pitch 1.4 to {_player}

command /afk [<text>]:
    trigger:
        if {core::afk::%player%} is not set: #tests for not afk
            broadcastMarksAFK(player)
            send sm("warning","&oWe recommend logging out if you plan on going AFK for more than a few minutes.")
            send sm("warning","&oYou will be kicked after 20 minutes of inactivity.")
            send sm("warning","&oMove, chat, or send a command to unmark yourself as AFK.")
            play sound "block.note_block.bell" with pitch 1.4 to player
            wait 2 ticks
            if arg 1 is not "-b": #allows afk without blindness
                apply blindness 1 without particles to player for 1 day
            wait 33 ticks #delay to prevent de-afking I assume
            set {core::afk::%player%} to 1 #set state as afk
        else: #if already afk
            stop
on player move: #de-afk on movement, but don't update last-action
    if {core::afk::%player%} is set: #only runs on afk players
        unafk(player)
on chat:
    if {core::afk::%player%} is set: #only runs on afk players
        unafk(player)
                
on command:
    if {core::afk::%player%} is set: #only runs on afk players
        unafk(player)
on join:
    if player's potion effects contains blindness:
        {core::afk::%player%} is set
        delete {core::afk::%{_player}%}
        remove blindness from player #removes blindness as it cannot be done 'on quit'

# Automatic AFK

function updateLastAction(p: player):
    if difference between {core::afk::lastaction::%{_p}%} and now is greater than 2 minutes:
        set {core::afk::lastaction::%{_p}%} to now
    else if {core::afk::lastaction::%{_p}%} is not set:
        set {core::afk::lastaction::%{_p}%} to now

on armor change:
    updateLastAction(player)
on block fertilize:
    updateLastAction(player)
on book edit:
    updateLastAction(player)
on inventory click:
    updateLastAction(player)
on bed enter:
    updateLastAction(player)
on break:
    updateLastAction(player)
on craft:
    updateLastAction(player)
on place:
    updateLastAction(player)
on chat:
    updateLastAction(player)
on command:
    updateLastAction(player)
on consume:
    updateLastAction(player)
on damage:
    attacker is a player:
        updateLastAction(attacker)
on shoot:
    updateLastAction(shooter)
on join:
    updateLastAction(player)
on quit:
    delete {core::afk::lastaction::%player%} #delete variable on leave

every minute in (world "world", world "world_nether", and world "world_the_end"):
    loop all players:
        if difference between {core::afk::lastaction::%loop-player%} and now is greater than {@warning-time}:
            if {core::afk::%loop-player%} is not set: # if not already afk, marks as afk. See command /afk for pertinent comments
                loop-player does not have permission "core.afk-bypass"
                broadcastMarkedAFK(loop-player)
                send sm("warning","&oYou have been marked as AFK. You will be kicked if you remain inactive.") to loop-player
                send sm("warning","&oMove, chat, or send a command to unmark yourself as AFK.") to loop-player
                wait 35 ticks
                set {core::afk::%loop-player%} to 1
                apply blindness 1 without particles to loop-player for 1 day   
                    
        if difference between {core::afk::lastaction::%loop-player%} and now is greater than {@kick-time}: 
            loop-player does not have permission "core.afk-bypass"
            kick loop-player due to "Kicked for inactivity."
            delete {core::afk::%loop-player%}
            loop all players:
                if loop-player-2 has permission "core.admin":
                    send formatted "%{colour::accent}% %loop-player-1% %{colour::warning}%has been kicked for being AFK." to loop-player-2