on load:
    # Compressables. These are the items that can be compressed.
    set {compress::compressables::*} to (white concrete, dirt, cobblestone)

    # Compression tiers. Each element is another layer of compression, ie: 1x, 2x, 3x, etc.
    # The text is what becomes the item's name and you can change that to whatever you'd like.
    # eg: ("Compressed", "Super Compressed", "Ultra Compressed")
    #
    # !! Warning: 
    # Be careful not to make any higher tiers substrings of lower tiers, as this will break the tier checker.
    # ie: don't do ("Compressed Stage 1", "Compressed Stage 2", "Compressed")
    set {compress::tiers::*} to ("Compressed", "2x Compressed", "3x Compressed", "4x Compressed")

on pick up:
    # ensure item is compressible
    {compress::compressables::*} contains event-item
    # wait for the item to get picked up
    wait 1 ticks
    # ensure the event actually happened
    event is not cancelled
    # compress
    compressItems(event-item, player's inventory)

function compressItems(item: item, inv: inventory):
    if {_item}'s name contains last element of {compress::tiers::*}:
        stop
    
    # get compression tier
    set {_tier} to size of {compress::tiers::*}
    loop reversed {compress::tiers::*}:
        if {_item}'s name contains loop-value:
            exit loop
        subtract 1 from {_tier}

    # set up compressed item
    set {_compressed-item} to 1 of {_item}
    set {_compressed-item}'s name to "&r%{compress::tiers::%{_tier} + 1%}% %type of {_item}%" in proper case
    
    # get the slots with the normal item in them (ie: same type, same name)
    set {_slots::*} to (integers between 0 and 35) where [1 of (slot input of {_inv}) is 1 of {_item}]
    # unnamed items will match any named item, so ensure only matches unnamed
    if {_item}'s name is not set: 
        set {_slots::*} to {_slots::*} where [(slot input of {_inv})'s name is not set] 
    
    # calculate amount of compressed to give, then give it
    add item amount of slot {_slots::*} of {_inv} to {_normal-amount}

    # remove all normal items and then give back the excess
    clear slot {_slots::*} of {_inv}
    set slot {_slots::1} of {_inv} to mod({_normal-amount},9) of {_item}

    # add compressed item to inventory (we waited to do this so we could clear the slots first)
    add floor({_normal-amount} / 9) of {_compressed-item} to {_inv}
    
    # compress further
    compressItems({_compressed-item}, {_inv})


